// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="col-xs-6"
        >
          <Link
            to="/"
          >
            Homepage
          </Link>
        </div>,
        <div
          className="col-xs-6 text-right"
        >
          LinkVOTE Challenge
        </div>,
      ],
      "className": "header col-xs-12",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            to="/"
          >
            Homepage
          </Link>,
          "className": "col-xs-6",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Homepage",
            "to": "/",
          },
          "ref": null,
          "rendered": "Homepage",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "LinkVOTE Challenge",
          "className": "col-xs-6 text-right",
        },
        "ref": null,
        "rendered": "LinkVOTE Challenge",
        "type": "div",
      },
    ],
    "type": "header",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="col-xs-6"
          >
            <Link
              to="/"
            >
              Homepage
            </Link>
          </div>,
          <div
            className="col-xs-6 text-right"
          >
            LinkVOTE Challenge
          </div>,
        ],
        "className": "header col-xs-12",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              to="/"
            >
              Homepage
            </Link>,
            "className": "col-xs-6",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Homepage",
              "to": "/",
            },
            "ref": null,
            "rendered": "Homepage",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "LinkVOTE Challenge",
            "className": "col-xs-6 text-right",
          },
          "ref": null,
          "rendered": "LinkVOTE Challenge",
          "type": "div",
        },
      ],
      "type": "header",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
